// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function isInArray(value, arr) {
  return Belt_Array.some(arr, (function (v) {
                return Caml_obj.caml_equal(v, value);
              }));
}

function isInInterval(value, start, end_, step) {
  if (Caml_int32.mod_(value - start | 0, step) === 0) {
    return value <= end_;
  } else {
    return false;
  }
}

function isInYear(currentYear, param) {
  if (typeof param === "string") {
    return true;
  }
  if (param.NAME === "Values") {
    return isInArray(currentYear, param.VAL);
  }
  var match = param.VAL;
  var start = match[0];
  if (start !== undefined) {
    var end_ = match[1];
    if (end_ !== undefined) {
      return isInInterval(currentYear, start, end_, match[2]);
    } else {
      return isInInterval(currentYear, start, Pervasives.max_int, match[2]);
    }
  }
  var end_$1 = match[1];
  if (end_$1 !== undefined) {
    return isInInterval(currentYear, 0, end_$1, match[2]);
  } else {
    return isInInterval(currentYear, 0, Pervasives.max_int, match[2]);
  }
}

function isInExpr(current, param) {
  if (typeof param === "string") {
    return true;
  }
  if (param.NAME === "Values") {
    return isInArray(current, param.VAL);
  }
  var match = param.VAL;
  return isInInterval(current, match[0], match[1], match[2]);
}

function isInDayOfWeek(dayOfMonth, dayOfWeek, daysInMonth, expr) {
  if (typeof expr === "string") {
    return isInExpr(dayOfWeek, expr);
  }
  var variant = expr.NAME;
  if (variant !== "NthDayOfWeekInMonth") {
    if (variant === "Values" || variant === "Interval") {
      return isInExpr(dayOfWeek, expr);
    } else if (dayOfWeek === expr.VAL) {
      return (dayOfMonth + 7 | 0) > daysInMonth;
    } else {
      return false;
    }
  }
  var match = expr.VAL;
  if (match[0] === dayOfWeek) {
    return ((dayOfMonth / 7 | 0) + 1 | 0) === match[1];
  } else {
    return false;
  }
}

function isInDayOfMonth(dayOfMonth, dayOfWeek, daysInMonth, expr) {
  if (typeof expr === "string") {
    if (expr === "Wildcard") {
      return isInExpr(dayOfMonth, expr);
    } else {
      var daysInMonthRemaining = daysInMonth - dayOfMonth | 0;
      var dayOfWeekAtMonthEnd = (dayOfWeek + daysInMonthRemaining | 0) % 7;
      var daysFromMonthEndToNearestWeekday = dayOfWeekAtMonthEnd !== 0 ? (
          dayOfWeekAtMonthEnd !== 6 ? 0 : 1
        ) : 2;
      var dayOfMonthOfLastWeekday = daysInMonth - daysFromMonthEndToNearestWeekday | 0;
      return dayOfMonth === dayOfMonthOfLastWeekday;
    }
  }
  var variant = expr.NAME;
  if (variant === "NearestWeekday") {
    var scheduledDayOfMonth = expr.VAL;
    var dayOfWeekOfScheduledDay = ((dayOfWeek + (scheduledDayOfMonth - dayOfMonth | 0) | 0) + 7 | 0) % 7;
    var daysInMonthRemaining$1 = daysInMonth - scheduledDayOfMonth | 0;
    var daysToNearestWeekdayFromScheduledDay = dayOfWeekOfScheduledDay !== 0 ? (
        dayOfWeekOfScheduledDay !== 6 ? 0 : -1
      ) : (
        daysInMonthRemaining$1 >= 1 ? 1 : -2
      );
    return (daysToNearestWeekdayFromScheduledDay + scheduledDayOfMonth | 0) === dayOfMonth;
  } else if (variant === "DaysBeforeEndOfMonth") {
    return (daysInMonth - dayOfMonth | 0) === expr.VAL;
  } else {
    return isInExpr(dayOfMonth, expr);
  }
}

var isInMinute = isInExpr;

var isInHour = isInExpr;

var isInMonth = isInExpr;

exports.isInYear = isInYear;
exports.isInMinute = isInMinute;
exports.isInHour = isInHour;
exports.isInMonth = isInMonth;
exports.isInDayOfWeek = isInDayOfWeek;
exports.isInDayOfMonth = isInDayOfMonth;
/* No side effect */
