// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var NactCron_Evaluators = require("./NactCron_Evaluators.bs.js");

function fromDate(date) {
  return {
          year: date.getUTCFullYear() | 0,
          month: (date.getUTCMonth() | 0) + 1 | 0,
          dayOfMonth: date.getUTCDate() | 0,
          dayOfWeek: date.getUTCDay() | 0,
          hour: date.getUTCHours() | 0,
          minute: date.getUTCMinutes() | 0,
          daysInMonth: (new Date(date.getUTCFullYear(), date.getUTCMonth() + 1.0, 0.0).getUTCDate() | 0) + 1 | 0
        };
}

var Time = {
  fromDate: fromDate
};

function partitionBy(lists, criteria) {
  var partitions = Belt_List.map(lists, (function (__x) {
          return Belt_List.partition(__x, criteria);
        }));
  return [
          Belt_List.flatten(Belt_List.map(partitions, (function (prim) {
                      return prim[0];
                    }))),
          Belt_List.flatten(Belt_List.map(partitions, (function (prim) {
                      return prim[1];
                    })))
        ];
}

function updateYears(param, param$1, param$2, state) {
  var year = param$1.year;
  if (param.year === year) {
    return [
            false,
            state
          ];
  }
  var match = partitionBy({
        hd: state.schedules,
        tl: {
          hd: state.years,
          tl: {
            hd: state.months,
            tl: {
              hd: state.days,
              tl: {
                hd: state.hours,
                tl: {
                  hd: state.minutes,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }, (function (param) {
          return NactCron_Evaluators.isInYear(year, param._1.years);
        }));
  return [
          true,
          {
            prevTime: state.prevTime,
            schedules: match[1],
            years: match[0],
            months: /* [] */0,
            days: /* [] */0,
            hours: /* [] */0,
            minutes: /* [] */0
          }
        ];
}

function updateMonths(param, param$1, update, state) {
  var month = param$1.month;
  if (!update && param.month === month) {
    return [
            false,
            state
          ];
  }
  var match = partitionBy({
        hd: state.years,
        tl: {
          hd: state.months,
          tl: {
            hd: state.days,
            tl: {
              hd: state.hours,
              tl: {
                hd: state.minutes,
                tl: /* [] */0
              }
            }
          }
        }
      }, (function (param) {
          return NactCron_Evaluators.isInMonth(month, param._1.months);
        }));
  return [
          true,
          {
            prevTime: state.prevTime,
            schedules: state.schedules,
            years: match[1],
            months: match[0],
            days: /* [] */0,
            hours: /* [] */0,
            minutes: /* [] */0
          }
        ];
}

function updateDays(param, param$1, update, state) {
  var dayOfMonth = param$1.dayOfMonth;
  if (!update && param.dayOfMonth === dayOfMonth) {
    return [
            false,
            state
          ];
  }
  var daysInMonth = param$1.daysInMonth;
  var dayOfWeek = param$1.dayOfWeek;
  var match = partitionBy({
        hd: state.months,
        tl: {
          hd: state.days,
          tl: {
            hd: state.hours,
            tl: {
              hd: state.minutes,
              tl: /* [] */0
            }
          }
        }
      }, (function (param) {
          var match = param._1;
          if (NactCron_Evaluators.isInDayOfMonth(dayOfMonth, dayOfWeek, daysInMonth, match.daysOfMonth)) {
            return NactCron_Evaluators.isInDayOfWeek(dayOfMonth, dayOfWeek, daysInMonth, match.daysOfWeek);
          } else {
            return false;
          }
        }));
  return [
          true,
          {
            prevTime: state.prevTime,
            schedules: state.schedules,
            years: state.years,
            months: match[1],
            days: match[0],
            hours: /* [] */0,
            minutes: /* [] */0
          }
        ];
}

function updateHours(param, param$1, update, state) {
  var hour = param$1.hour;
  if (!update && param.hour === hour) {
    return [
            false,
            state
          ];
  }
  var match = partitionBy({
        hd: state.days,
        tl: {
          hd: state.hours,
          tl: {
            hd: state.minutes,
            tl: /* [] */0
          }
        }
      }, (function (param) {
          return NactCron_Evaluators.isInHour(hour, param._1.hours);
        }));
  return [
          true,
          {
            prevTime: state.prevTime,
            schedules: state.schedules,
            years: state.years,
            months: state.months,
            days: match[1],
            hours: match[0],
            minutes: /* [] */0
          }
        ];
}

function updateMinutes(param, param$1, update, state) {
  var minute = param$1.minute;
  if (!update && param.minute === minute) {
    return [
            false,
            state
          ];
  }
  var match = partitionBy({
        hd: state.hours,
        tl: {
          hd: state.minutes,
          tl: /* [] */0
        }
      }, (function (param) {
          return NactCron_Evaluators.isInMinute(minute, param._1.minutes);
        }));
  return [
          true,
          {
            prevTime: state.prevTime,
            schedules: state.schedules,
            years: state.years,
            months: state.months,
            days: state.days,
            hours: match[1],
            minutes: match[0]
          }
        ];
}

function thread(prevState, prevTime, time, functions) {
  return Belt_List.reduce(functions, [
                false,
                prevState
              ], (function (param, f) {
                  return Curry._4(f, prevTime, time, param[0], param[1]);
                }))[1];
}

function update(prevState, time) {
  var init = thread(prevState, prevState.prevTime, time, {
        hd: updateYears,
        tl: {
          hd: updateMonths,
          tl: {
            hd: updateDays,
            tl: {
              hd: updateHours,
              tl: {
                hd: updateMinutes,
                tl: /* [] */0
              }
            }
          }
        }
      });
  return {
          prevTime: time,
          schedules: init.schedules,
          years: init.years,
          months: init.months,
          days: init.days,
          hours: init.hours,
          minutes: init.minutes
        };
}

function getPendingJobs(param) {
  return param.minutes;
}

function addJob(state, expr, msg) {
  var job_0 = Random.$$int(1073741823);
  var job = /* Schedule */{
    _0: job_0,
    _1: expr,
    _2: msg
  };
  var time = state.prevTime;
  var updatedState = NactCron_Evaluators.isInYear(time.year, expr.years) ? (
      NactCron_Evaluators.isInMonth(time.month, expr.months) ? (
          !NactCron_Evaluators.isInDayOfMonth(time.dayOfMonth, time.dayOfWeek, time.daysInMonth, expr.daysOfMonth) || !NactCron_Evaluators.isInDayOfWeek(time.dayOfMonth, time.dayOfWeek, time.daysInMonth, expr.daysOfWeek) ? ({
                prevTime: state.prevTime,
                schedules: state.schedules,
                years: state.years,
                months: {
                  hd: job,
                  tl: state.months
                },
                days: state.days,
                hours: state.hours,
                minutes: state.minutes
              }) : (
              NactCron_Evaluators.isInHour(time.hour, expr.hours) ? (
                  NactCron_Evaluators.isInMinute(time.hour, expr.hours) ? ({
                        prevTime: state.prevTime,
                        schedules: state.schedules,
                        years: state.years,
                        months: state.months,
                        days: state.days,
                        hours: state.hours,
                        minutes: {
                          hd: job,
                          tl: state.minutes
                        }
                      }) : ({
                        prevTime: state.prevTime,
                        schedules: state.schedules,
                        years: state.years,
                        months: state.months,
                        days: state.days,
                        hours: {
                          hd: job,
                          tl: state.hours
                        },
                        minutes: state.minutes
                      })
                ) : ({
                    prevTime: state.prevTime,
                    schedules: state.schedules,
                    years: state.years,
                    months: state.months,
                    days: {
                      hd: job,
                      tl: state.days
                    },
                    hours: state.hours,
                    minutes: state.minutes
                  })
            )
        ) : ({
            prevTime: state.prevTime,
            schedules: state.schedules,
            years: {
              hd: job,
              tl: state.years
            },
            months: state.months,
            days: state.days,
            hours: state.hours,
            minutes: state.minutes
          })
    ) : ({
        prevTime: state.prevTime,
        schedules: {
          hd: job,
          tl: state.schedules
        },
        years: state.years,
        months: state.months,
        days: state.days,
        hours: state.hours,
        minutes: state.minutes
      });
  return [
          job,
          updatedState
        ];
}

function scheduleDoesNotHaveId(sId, param) {
  return sId !== param._0;
}

function getJobs(state) {
  return Belt_List.concatMany([
              state.schedules,
              state.years,
              state.months,
              state.days,
              state.hours,
              state.minutes
            ]);
}

function tryFindJob(state, targetId) {
  return Belt_Option.getWithDefault(Belt_List.getBy({
                  hd: Belt_List.getBy(state.schedules, (function (param) {
                          return param._0 === targetId;
                        })),
                  tl: {
                    hd: Belt_List.getBy(state.years, (function (param) {
                            return param._0 === targetId;
                          })),
                    tl: {
                      hd: Belt_List.getBy(state.months, (function (param) {
                              return param._0 === targetId;
                            })),
                      tl: {
                        hd: Belt_List.getBy(state.days, (function (param) {
                                return param._0 === targetId;
                              })),
                        tl: {
                          hd: Belt_List.getBy(state.hours, (function (param) {
                                  return param._0 === targetId;
                                })),
                          tl: {
                            hd: Belt_List.getBy(state.minutes, (function (param) {
                                    return param._0 === targetId;
                                  })),
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  }
                }, (function (param) {
                    return param !== undefined;
                  })), undefined);
}

function removeJob(state, id) {
  return {
          prevTime: state.prevTime,
          schedules: Belt_List.keep(state.schedules, (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          years: Belt_List.keep(state.years, (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          months: Belt_List.keep(state.months, (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          days: Belt_List.keep(state.days, (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          hours: Belt_List.keep(state.hours, (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                })),
          minutes: Belt_List.keep(state.minutes, (function (param) {
                  return scheduleDoesNotHaveId(id, param);
                }))
        };
}

var Expression;

var ScheduleId = {
  fromInteger: (function (prim) {
      return prim;
    })
};

var empty = {
  prevTime: {
    year: -1,
    month: -1,
    dayOfMonth: -1,
    dayOfWeek: -1,
    hour: -1,
    minute: -1,
    daysInMonth: -1
  },
  schedules: /* [] */0,
  years: /* [] */0,
  months: /* [] */0,
  days: /* [] */0,
  hours: /* [] */0,
  minutes: /* [] */0
};

exports.Expression = Expression;
exports.Time = Time;
exports.ScheduleId = ScheduleId;
exports.empty = empty;
exports.update = update;
exports.getPendingJobs = getPendingJobs;
exports.getJobs = getJobs;
exports.tryFindJob = tryFindJob;
exports.addJob = addJob;
exports.removeJob = removeJob;
/* No side effect */
