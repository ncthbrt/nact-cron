// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var NactCron_Expression = require("../src/NactCron_Expression.bs.js");

function testExpression(minutesOpt, hoursOpt, daysOfMonthOpt, monthsOpt, daysOfWeekOpt, yearsOpt, expression) {
  var minutes = minutesOpt !== undefined ? minutesOpt : "Wildcard";
  var hours = hoursOpt !== undefined ? hoursOpt : "Wildcard";
  var daysOfMonth = daysOfMonthOpt !== undefined ? daysOfMonthOpt : "Wildcard";
  var months = monthsOpt !== undefined ? monthsOpt : "Wildcard";
  var daysOfWeek = daysOfWeekOpt !== undefined ? daysOfWeekOpt : "Wildcard";
  var years = yearsOpt !== undefined ? yearsOpt : "Wildcard";
  return Jest.test("The cron expression " + (expression + " should be correctly parsed"), (function (param) {
                return Jest.ExpectJs.toEqual({
                            minutes: minutes,
                            hours: hours,
                            daysOfMonth: daysOfMonth,
                            months: months,
                            daysOfWeek: daysOfWeek,
                            years: years,
                            expression: expression
                          }, Jest.ExpectJs.expect(NactCron_Expression.parse(expression)));
              }));
}

function testMalformedExpression(expression) {
  return Jest.test("The cron expression " + (expression + " should fail to parse"), (function (param) {
                return Jest.ExpectJs.toThrow(Jest.ExpectJs.expectFn((function (param) {
                                  return NactCron_Expression.parse(expression);
                                }), undefined));
              }));
}

testExpression(undefined, undefined, undefined, undefined, undefined, undefined, "* * * * *");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, undefined, undefined, undefined, undefined, undefined, "0 * * * *");

testExpression({
      NAME: "Interval",
      VAL: [
        0,
        10,
        1
      ]
    }, undefined, undefined, undefined, undefined, undefined, "0-10 * * * *");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        0,
        6,
        2
      ]
    }, undefined, "* * * * */2");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        0,
        6,
        2
      ]
    }, undefined, "* * * * 0/2");

testExpression(undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        9,
        12,
        2
      ]
    }, undefined, undefined, "* * * 9-12/2 *");

testExpression(undefined, undefined, undefined, undefined, undefined, undefined, "* * * ? *");

testExpression(undefined, undefined, undefined, undefined, undefined, undefined, "* * * * * ?");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        0,
        1,
        2,
        4
      ]
    }, undefined, "* * * * mon,tue,thu,sun");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        0,
        2
      ]
    }, undefined, "* * * * 7,2");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [1]
    }, {
      NAME: "Values",
      VAL: [1]
    }, undefined, undefined, "@annually");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [1]
    }, undefined, undefined, undefined, "@monthly");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [0]
    }, undefined, undefined, {
      NAME: "Values",
      VAL: [0]
    }, undefined, "@weekly");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [0]
    }, undefined, undefined, undefined, undefined, "@daily");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [0]
    }, undefined, undefined, undefined, undefined, "@midnight");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, undefined, undefined, undefined, undefined, undefined, "@hourly");

testExpression({
      NAME: "Values",
      VAL: [0]
    }, {
      NAME: "Values",
      VAL: [18]
    }, undefined, undefined, {
      NAME: "LastDayOfWeekInMonth",
      VAL: 6
    }, {
      NAME: "Interval",
      VAL: [
        2015,
        2017,
        1
      ]
    }, "0 18 ? * 6L 2015-2017");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, undefined, "* * * DEC,JAN *");

testExpression(undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        1,
        3,
        1
      ]
    }, undefined, undefined, "* * * JAN-MAR *");

testExpression(undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        1,
        5,
        2
      ]
    }, undefined, undefined, "* * * JAN-MAY/2 *");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        1,
        5,
        1
      ]
    }, undefined, "* * * * MON-FRI");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "Interval",
      VAL: [
        2,
        6,
        2
      ]
    }, undefined, "* * * * TUE-/2");

testExpression(undefined, undefined, {
      NAME: "NearestWeekday",
      VAL: 15
    }, undefined, undefined, undefined, "* * 15W * *");

testExpression(undefined, undefined, {
      NAME: "DaysBeforeEndOfMonth",
      VAL: 0
    }, undefined, undefined, undefined, "* * L * *");

testExpression(undefined, undefined, {
      NAME: "DaysBeforeEndOfMonth",
      VAL: 1
    }, undefined, undefined, undefined, "* * L-2 * *");

testMalformedExpression("* * L-32 * *");

testMalformedExpression("* * L-0 * *");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "LastDayOfWeekInMonth",
      VAL: 5
    }, undefined, "* * * * 5L");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "NthDayOfWeekInMonth",
      VAL: [
        3,
        3
      ]
    }, undefined, "* * * * WED#3");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "NthDayOfWeekInMonth",
      VAL: [
        3,
        3
      ]
    }, undefined, "* * * * wed#3");

testExpression(undefined, undefined, undefined, undefined, {
      NAME: "NthDayOfWeekInMonth",
      VAL: [
        3,
        3
      ]
    }, undefined, "* * * * 3#3");

testExpression(undefined, undefined, "LastWeekdayOfMonth", undefined, undefined, undefined, "* * LW * *");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        2000,
        2020,
        3
      ]
    }, "* * * DEC,JAN * 2000-2020/3");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        2000,
        undefined,
        3
      ]
    }, "* * * DEC,JAN * 2000-/3");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        2000,
        undefined,
        3
      ]
    }, "* * * DEC,JAN * 2000/3");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        2000,
        undefined,
        1
      ]
    }, "* * * DEC,JAN * 2000-");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        undefined,
        2020,
        1
      ]
    }, "* * * DEC,JAN * -2020");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        undefined,
        2020,
        2
      ]
    }, "* * * DEC,JAN * -2020/2");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Values",
      VAL: [
        2018,
        2019,
        2020
      ]
    }, "* * * DEC,JAN * 2018,2019,2020");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Values",
      VAL: [2018]
    }, "* * * DEC,JAN * 2018");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        undefined,
        undefined,
        2
      ]
    }, "* * * DEC,JAN * */2");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        undefined,
        undefined,
        2
      ]
    }, "* * * DEC,JAN * */2");

testExpression(undefined, undefined, undefined, {
      NAME: "Values",
      VAL: [
        1,
        12
      ]
    }, undefined, {
      NAME: "Interval",
      VAL: [
        undefined,
        2020,
        2
      ]
    }, "* * * DEC,JAN * -2020/2");

testMalformedExpression("* * * DEC,JAN * * *");

testMalformedExpression("* * * *");

testMalformedExpression("* * *");

testMalformedExpression("* *");

testMalformedExpression("*");

testMalformedExpression("* * * DEC,JAN * 2020-/2/2");

testMalformedExpression("* * * SEPT *");

testMalformedExpression("* * * * TUES");

testMalformedExpression("* * * * * 2a12");

testMalformedExpression("* * * * WED#3rd");

testMalformedExpression("* * * * */D");

testMalformedExpression("* * * * * */D");

testMalformedExpression("* * * DEC-/2/3 * *");

testMalformedExpression("* * * * WED#3#3");

testMalformedExpression("* * * * WED--");

testMalformedExpression("* * * DEC,JAN * 2020,2021/2");

testMalformedExpression("* * * DEC,JAN/2 * *");

testMalformedExpression("* * * 1,2/2 * *");

testMalformedExpression("* * * 10-20/ * *");

testMalformedExpression("60 * * DEC,JAN * *");

testMalformedExpression("* 24 * DEC,JAN * *");

testMalformedExpression("* * 32 DEC,JAN * *");

testMalformedExpression("* * 0 DEC,JAN * *");

testMalformedExpression("* * * 13 *");

testMalformedExpression("* * * 0 *");

testMalformedExpression("* * * * 8");

testMalformedExpression("* * * JANFEB *");

testMalformedExpression("* * * - *");

Jest.test("A malformed cron expression should return None when calling tryParse", (function (param) {
        return Jest.ExpectJs.toEqual(undefined, Jest.ExpectJs.expect(NactCron_Expression.tryParse("* * * * * -")));
      }));

Jest.test("A well formed cron expression should return Some when calling tryParse", (function (param) {
        return Jest.ExpectJs.toEqual(NactCron_Expression.parse("* * * * *"), Jest.ExpectJs.expect(NactCron_Expression.tryParse("* * * * *")));
      }));

var Expression;

exports.Expression = Expression;
exports.testExpression = testExpression;
exports.testMalformedExpression = testMalformedExpression;
/*  Not a pure module */
